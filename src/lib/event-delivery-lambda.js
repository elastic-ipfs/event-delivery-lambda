/**
 * @typedef SqsEventRecord
 * @property {string} messageId
 * @property {string} body
 */

/**
 * @typedef SqsEvent
 * @property {[SqsEventRecord]} Records
 */

/**
 * @typedef IpfsEvent
 * @property {string} type
 */

const maskPassword = (url, newPassword = '*') => {
  const tempUrl = new URL(url)
  tempUrl.password = newPassword
  return tempUrl
}

/**
 * @param {URL} eventTarget
 * @param {(target: URL, event: IpfsEvent) => Promise<void>} deliver
 */
function createEventDeliveryLambda(eventTarget, deliver, console = globalThis.console) {
  /**
   * @param {SqsEventRecord} record
   */
  async function processRecord(record) {
    const ipfsEvent = extractIpfsEventFromSqsEventRecord(record)
    await deliver(eventTarget, ipfsEvent)
  }
  /**
   * @param {SqsEvent} sqsEvent
   */
  return async sqsEvent => {
    console.log('event-delivery-lambda start', { eventTarget: maskPassword(eventTarget).toString() })
    const batchItemFailures = []
    await Promise.allSettled(sqsEvent.Records.map(async record => {
      try {
        await processRecord(record)
      } catch (error) {
        console.error('error processing record', error)
        batchItemFailures.push({
          itemIdentifier: record.messageId
        })
      }
    }))
    return { batchItemFailures }
  }
}

/**
 * Given an SQS Event Record from event-delivery-queue, return an IPFS Event embedded in the Record.
 * The IPFSEvents may come from sqsEventRecords generated by SQS listening to an SNS queue
 * @param {*} record
 * @returns
 */
function extractIpfsEventFromSqsEventRecord(record) {
  let body
  try {
    body = JSON.parse(record.body)
  } catch (error) {
    throw Object.assign(new Error('unable to parse record.body as JSON'), { record })
  }
  let ipfsEvent
  switch (body.Type) {
    case 'Notification': {
      const bodyMessage = body?.Message
      try {
        ipfsEvent = JSON.parse(bodyMessage)
      } catch (error) {
        throw Object.assign(new Error('unable to parse record.body Message as JSON'), { record })
      }
      break
    }
    default:
      throw new Error(`Unable to extract ipfsEvent from unexpected sqsEventRecord body.Type=${body.Type}`)
  }
  if (ipfsEvent) {
    return ipfsEvent
  }
  throw new Error('Unable to extract ipfsEvent from unexpected sqsEventRecord')
}

module.exports = {
  createEventDeliveryLambda
}
